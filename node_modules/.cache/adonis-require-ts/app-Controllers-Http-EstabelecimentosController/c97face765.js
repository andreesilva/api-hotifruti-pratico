"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Cidade_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Cidade"));
const CidadesEstabelecimento_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/CidadesEstabelecimento"));
const Estabelecimento_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Estabelecimento"));
const Pedido_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Pedido"));
class EstabelecimentosController {
    async pedidos({ response, auth }) {
        const userAuth = await auth.use("api").authenticate();
        const estabelecimento = await Estabelecimento_1.default.findByOrFail("user_id", userAuth.id);
        const pedidos = await Pedido_1.default.query()
            .where("estabelecimento_id", estabelecimento.id)
            .preload("cliente")
            .preload("pedido_status", (statusQuery) => {
            statusQuery
                .preload("status");
        }).orderBy("pedido_id", "desc");
        return response.ok(pedidos);
    }
    async show({ params, response }) {
        const idEst = params.id;
        let arrayCidades = [];
        const cidades = await CidadesEstabelecimento_1.default
            .query()
            .where("estabelecimento_id", idEst);
        for await (const cidade of cidades) {
            const cidade_ = await Cidade_1.default.findByOrFail("id", cidade.cidade_id);
            arrayCidades.push({
                id: cidade_.id,
                cidade: cidade_.nome,
                custo_entrega: cidade.custo_entrega
            });
        }
        const estabelecimento = await Estabelecimento_1.default.query()
            .where("id", idEst)
            .preload("categorias", (categoriasQuery) => {
            categoriasQuery.
                preload("produtos");
        }).preload("meiospagamentos")
            .firstOrFail();
        return response.ok({
            id: estabelecimento.id,
            nome: estabelecimento.nome,
            logo: estabelecimento.logo,
            bloqueado: estabelecimento.bloqueado,
            online: estabelecimento.online,
            cidades: arrayCidades,
            meios_pagamentos: estabelecimento.meiospagamentos,
            categorias: estabelecimento.categorias,
        });
    }
}
exports.default = EstabelecimentosController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXN0YWJlbGVjaW1lbnRvc0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJFc3RhYmVsZWNpbWVudG9zQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHFGQUF1QztBQUN2QyxxSEFBdUU7QUFDdkUsdUdBQXlEO0FBQ3pELHFGQUF1QztBQUV2QyxNQUFxQiwwQkFBMEI7SUFDcEMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQXVCO1FBQ3hELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RCxNQUFNLGVBQWUsR0FBRyxNQUFNLHlCQUFlLENBQUMsWUFBWSxDQUN0RCxTQUFTLEVBQ1QsUUFBUSxDQUFDLEVBQUUsQ0FDZCxDQUFDO1FBRUYsTUFBTSxPQUFPLEdBQUcsTUFBTSxnQkFBTSxDQUFDLEtBQUssRUFBRTthQUMvQixLQUFLLENBQUMsb0JBQW9CLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQzthQUMvQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2xCLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN0QyxXQUFXO2lCQUNOLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXBDLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQXVCO1FBQ3ZELE1BQU0sS0FBSyxHQUFXLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFFaEMsSUFBSSxZQUFZLEdBQVEsRUFBRSxDQUFDO1FBRTNCLE1BQU0sT0FBTyxHQUFHLE1BQU0sZ0NBQXNCO2FBQ3ZDLEtBQUssRUFBRTthQUNQLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QyxJQUFJLEtBQUssRUFBRSxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDaEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxnQkFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2xFLFlBQVksQ0FBQyxJQUFJLENBQUM7Z0JBQ2QsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFO2dCQUNkLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDcEIsYUFBYSxFQUFFLE1BQU0sQ0FBQyxhQUFhO2FBQ3RDLENBQUMsQ0FBQztTQUNOO1FBRUQsTUFBTSxlQUFlLEdBQUcsTUFBTSx5QkFBZSxDQUFDLEtBQUssRUFBRTthQUNoRCxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQzthQUNsQixPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDdkMsZUFBZTtnQkFDWCxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO2FBQzVCLFdBQVcsRUFBRSxDQUFDO1FBRW5CLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNmLEVBQUUsRUFBRSxlQUFlLENBQUMsRUFBRTtZQUN0QixJQUFJLEVBQUUsZUFBZSxDQUFDLElBQUk7WUFDMUIsSUFBSSxFQUFFLGVBQWUsQ0FBQyxJQUFJO1lBQzFCLFNBQVMsRUFBRSxlQUFlLENBQUMsU0FBUztZQUNwQyxNQUFNLEVBQUUsZUFBZSxDQUFDLE1BQU07WUFDOUIsT0FBTyxFQUFFLFlBQVk7WUFDckIsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLGVBQWU7WUFDakQsVUFBVSxFQUFFLGVBQWUsQ0FBQyxVQUFVO1NBQ3pDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFSjtBQXpERCw2Q0F5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xyXG5pbXBvcnQgQ2lkYWRlIGZyb20gJ0FwcC9Nb2RlbHMvQ2lkYWRlJztcclxuaW1wb3J0IENpZGFkZXNFc3RhYmVsZWNpbWVudG8gZnJvbSAnQXBwL01vZGVscy9DaWRhZGVzRXN0YWJlbGVjaW1lbnRvJztcclxuaW1wb3J0IEVzdGFiZWxlY2ltZW50byBmcm9tICdBcHAvTW9kZWxzL0VzdGFiZWxlY2ltZW50byc7XHJcbmltcG9ydCBQZWRpZG8gZnJvbSAnQXBwL01vZGVscy9QZWRpZG8nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXN0YWJlbGVjaW1lbnRvc0NvbnRyb2xsZXIge1xyXG4gICAgcHVibGljIGFzeW5jIHBlZGlkb3MoeyByZXNwb25zZSwgYXV0aCB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcbiAgICAgICAgY29uc3QgdXNlckF1dGggPSBhd2FpdCBhdXRoLnVzZShcImFwaVwiKS5hdXRoZW50aWNhdGUoKTtcclxuICAgICAgICBjb25zdCBlc3RhYmVsZWNpbWVudG8gPSBhd2FpdCBFc3RhYmVsZWNpbWVudG8uZmluZEJ5T3JGYWlsKFxyXG4gICAgICAgICAgICBcInVzZXJfaWRcIixcclxuICAgICAgICAgICAgdXNlckF1dGguaWRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBjb25zdCBwZWRpZG9zID0gYXdhaXQgUGVkaWRvLnF1ZXJ5KClcclxuICAgICAgICAgICAgLndoZXJlKFwiZXN0YWJlbGVjaW1lbnRvX2lkXCIsIGVzdGFiZWxlY2ltZW50by5pZClcclxuICAgICAgICAgICAgLnByZWxvYWQoXCJjbGllbnRlXCIpXHJcbiAgICAgICAgICAgIC5wcmVsb2FkKFwicGVkaWRvX3N0YXR1c1wiLCAoc3RhdHVzUXVlcnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHN0YXR1c1F1ZXJ5XHJcbiAgICAgICAgICAgICAgICAgICAgLnByZWxvYWQoXCJzdGF0dXNcIik7XHJcbiAgICAgICAgICAgIH0pLm9yZGVyQnkoXCJwZWRpZG9faWRcIiwgXCJkZXNjXCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzcG9uc2Uub2socGVkaWRvcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHNob3coeyBwYXJhbXMsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuICAgICAgICBjb25zdCBpZEVzdDogbnVtYmVyID0gcGFyYW1zLmlkO1xyXG5cclxuICAgICAgICBsZXQgYXJyYXlDaWRhZGVzOiBhbnkgPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgY2lkYWRlcyA9IGF3YWl0IENpZGFkZXNFc3RhYmVsZWNpbWVudG9cclxuICAgICAgICAgICAgLnF1ZXJ5KClcclxuICAgICAgICAgICAgLndoZXJlKFwiZXN0YWJlbGVjaW1lbnRvX2lkXCIsIGlkRXN0KTtcclxuXHJcbiAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaWRhZGUgb2YgY2lkYWRlcykge1xyXG4gICAgICAgICAgICBjb25zdCBjaWRhZGVfID0gYXdhaXQgQ2lkYWRlLmZpbmRCeU9yRmFpbChcImlkXCIsIGNpZGFkZS5jaWRhZGVfaWQpO1xyXG4gICAgICAgICAgICBhcnJheUNpZGFkZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZDogY2lkYWRlXy5pZCxcclxuICAgICAgICAgICAgICAgIGNpZGFkZTogY2lkYWRlXy5ub21lLFxyXG4gICAgICAgICAgICAgICAgY3VzdG9fZW50cmVnYTogY2lkYWRlLmN1c3RvX2VudHJlZ2FcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlc3RhYmVsZWNpbWVudG8gPSBhd2FpdCBFc3RhYmVsZWNpbWVudG8ucXVlcnkoKVxyXG4gICAgICAgICAgICAud2hlcmUoXCJpZFwiLCBpZEVzdClcclxuICAgICAgICAgICAgLnByZWxvYWQoXCJjYXRlZ29yaWFzXCIsIChjYXRlZ29yaWFzUXVlcnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpYXNRdWVyeS5cclxuICAgICAgICAgICAgICAgICAgICBwcmVsb2FkKFwicHJvZHV0b3NcIik7XHJcbiAgICAgICAgICAgIH0pLnByZWxvYWQoXCJtZWlvc3BhZ2FtZW50b3NcIilcclxuICAgICAgICAgICAgLmZpcnN0T3JGYWlsKCk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5vayh7XHJcbiAgICAgICAgICAgIGlkOiBlc3RhYmVsZWNpbWVudG8uaWQsXHJcbiAgICAgICAgICAgIG5vbWU6IGVzdGFiZWxlY2ltZW50by5ub21lLFxyXG4gICAgICAgICAgICBsb2dvOiBlc3RhYmVsZWNpbWVudG8ubG9nbyxcclxuICAgICAgICAgICAgYmxvcXVlYWRvOiBlc3RhYmVsZWNpbWVudG8uYmxvcXVlYWRvLFxyXG4gICAgICAgICAgICBvbmxpbmU6IGVzdGFiZWxlY2ltZW50by5vbmxpbmUsXHJcbiAgICAgICAgICAgIGNpZGFkZXM6IGFycmF5Q2lkYWRlcyxcclxuICAgICAgICAgICAgbWVpb3NfcGFnYW1lbnRvczogZXN0YWJlbGVjaW1lbnRvLm1laW9zcGFnYW1lbnRvcyxcclxuICAgICAgICAgICAgY2F0ZWdvcmlhczogZXN0YWJlbGVjaW1lbnRvLmNhdGVnb3JpYXMsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==